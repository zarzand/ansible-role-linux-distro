---

#- name: Print all available facts
#  ansible.builtin.debug:
#    msg: "{{ ansible_facts }}"

- name: network | Gather service facts
  ansible.builtin.service_facts:

# -------------------------------------------- #
- name: network | NetworkManager
  when: ansible_facts['services']['NetworkManager.service']['status'] | default('not-found') != 'not-found'
  block:
  - name: network | Check NetworkManager service status
    ansible.builtin.service:
      name: NetworkManager.service
      state: started #status
    register: network_manager_status

  - name: network | Display NetworkManager service status
    ansible.builtin.debug:
      msg: "{{ network_manager_status.status.ActiveState }}" # network_manager_status.status.ActiveState == 'active' # when: network_manager_status.status.ActiveState != 'active'

# -------------------------------------------- #
- name: network | networkd
  when: ansible_facts['services']['systemd-networkd.service']['status'] | default('not-found') != 'not-found'
  block:
  - name: network | Check networkd service status
    ansible.builtin.service:
      name: systemd-networkd.service
      state: started
    register: networkd_status

  - name: network | Check for netplan configuration files
    ansible.builtin.find:
      paths: /etc/netplan
      patterns: "*.yaml"
    register: netplan_files

  - name: network | Read netplan configuration if files exist
    ansible.builtin.slurp:
      src: "{{ item.path }}"
    loop: "{{ netplan_files.files }}"
    register: netplan_content
    when: netplan_files.files | length > 0

  - name: network | Determine netplan renderer
    ansible.builtin.set_fact:
      netplan_renderer: "unknown"
    when: netplan_files.files | length == 0




  - name: network | Display ethernet interface name
    ansible.builtin.debug:
      msg: "{{ item.content | b64decode | from_yaml }}"
    loop: "{{ netplan_content.results }}"


  - name: network | Display ethernet interface name
    ansible.builtin.set_fact:
      temp_netplan: "{{ item.content | b64decode | from_yaml }}"
    loop: "{{ netplan_content.results }}"

  - name: network | Display ethernet interface name
    ansible.builtin.debug:
      msg: "{{ temp_netplan.network.version | default('none') }}"





  - name: network | Determine netplan renderer from content
    ansible.builtin.set_fact:
      netplan_renderer: "{{ item.content | b64decode | from_yaml | json_query('network.renderer') }}"
    loop: "{{ netplan_content.results }}"
    when: netplan_files.files | length > 0 and item.content is defined

  - name: network | Display networkd service status
    ansible.builtin.debug:
      msg: "{{ networkd_status.status.ActiveState }}"

  - name: network | Determine primary network manager
    ansible.builtin.set_fact:
      primary_network_manager: >-
        {% if {{ network_manager_status.status.ActiveState == 'active' }} and netplan_renderer == 'NetworkManager' %}
          NetworkManager (via Netplan)
        {% elif network_manager_status.status.ActiveState == 'active' %}
          NetworkManager (direct)
        {% elif netplan_renderer == 'networkd' %}
          Netplan (systemd-networkd)
        {% else %}
          Unknown or other method
        {% endif %}

# -------------------------------------------- #
- name: network | Get ethernet interface name
  ansible.builtin.shell:
    cmd: |
      lshw -class network | awk '/description: Ethernet interface/{flag=1; next} /logical name:/ && flag{print $3; flag=0}'
  register: ethernet_interface_name

- name: network | Display ethernet interface name
  ansible.builtin.debug:
    msg: "{{ item }}"
  with_items: "{{ ethernet_interface_name.stdout_lines }}"

#
#- name: Check NetworkManager service status
#  ansible.builtin.command: systemctl is-active NetworkManager
#  register: nm_status
#  ignore_errors: true
#
#- name: Set fact if NetworkManager is running
#  ansible.builtin.set_fact:
#    network_manager_active: "{{ nm_status.rc == 0 }}"
#
#- name: Check for Netplan configuration files
#  ansible.builtin.find:
#    paths: /etc/netplan
#    patterns: "*.yaml"
#  register: netplan_files
#
#- name: Read Netplan configuration if files exist
#  ansible.builtin.slurp:
#    src: "{{ item.path }}"
#  loop: "{{ netplan_files.files }}"
#  register: netplan_content
#  when: netplan_files.files | length > 0
#
#- name: Determine Netplan renderer
#  ansible.builtin.set_fact:
#    netplan_renderer: "unknown"
#  when: netplan_files.files | length == 0
#
#- name: Determine Netplan renderer from content
#  ansible.builtin.set_fact:
#    netplan_renderer: "{{ item.content | b64decode | from_yaml | json_query('network.renderer') }}"
#  loop: "{{ netplan_content.results }}"
#  when: netplan_files.files | length > 0 and item.content is defined
#
#
#- name: Determine primary network manager
#  ansible.builtin.set_fact:
#    primary_network_manager: >-
#      {% if network_manager_active and netplan_renderer == 'NetworkManager' %}
#        NetworkManager (via Netplan)
#      {% elif network_manager_active %}
#        NetworkManager (direct)
#      {% elif netplan_renderer == 'networkd' %}
#        Netplan (systemd-networkd)
#      {% else %}
#        Unknown or other method
#      {% endif %}