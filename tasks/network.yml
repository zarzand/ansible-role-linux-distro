---

- name: network | Set fact if NetworkManager is active
  ansible.builtin.set_fact:
    network_manager_active: "{{ (ansible_facts.services['NetworkManager.service'].status | default('not-found')) != 'not-found' }}"

# -------------------------------------------- #
- name: network | Set fact if systemd-networkd is active
  ansible.builtin.set_fact:
    networkd_active: "{{ (ansible_facts.services['systemd-networkd.service'].status | default('not-found')) != 'not-found' }}"

# -------------------------------------------- #
- name: network | Find netplan configuration files
  ansible.builtin.find:
    paths: /etc/netplan
    patterns: "*.yaml"
  register: netplan_files

- name: network | Set netplan renderer unknown if no configuration files
  ansible.builtin.set_fact:
    netplan_renderer: "unknown"
  when: netplan_files.files | length == 0

- name: network | Read netplan content results
  ansible.builtin.set_fact:
    netplan_content_decoded: "{{ netplan_files.files | map(attribute='path') | map('slurp') | map(attribute='content') | map('b64decode') | map('from_yaml') | list }}"
  when: netplan_files.files | length > 0


- name: network | Determine netplan renderer from content
  ansible.builtin.set_fact:
    netplan_renderer: "{{ netplan_content_decoded | map(attribute='network.renderer') | select('defined') | first | default('none') }}"
  when: netplan_files.files | length > 0

- name: network | Determine primary network manager
  ansible.builtin.set_fact:
    primary_network_manager: >-
      {% if network_manager_active and netplan_renderer == 'NetworkManager' %}
        NetworkManagerViaNetplan
      {% elif network_manager_active %}
        NetworkManager
      {% elif netplan_renderer in ['networkd', 'none'] %}
        SystemdNetworkdViaNetplan
      {% elif networkd_active and netplan_renderer == 'unknown' %}
        SystemdNetworkd
      {% else %}
        UnknownOrOtherMethod
      {% endif %}

- name: network | Print detected network manager
  ansible.builtin.debug:
    var: primary_network_manager

# -------------------------------------------- #
- name: network | Get ethernet interface name
  ansible.builtin.shell:
    cmd: |
       lshw -class network 2>/dev/null | awk '/description: Ethernet interface/ {flag=1} /logical name:/ && flag {iface=$3} /serial:/ && flag {mac=$2} /configuration:/ && flag {if ($0 ~ /link=/) {match($0, /link=([a-z]+)/, m); cmd="ip link show " iface " | grep -q \"state UP\" && echo up || echo down"; cmd | getline state; close(cmd); printf "{\"name\": \"%s\", \"macaddress\": \"%s\", \"link\": \"%s\", \"state\": \"%s\"}\n", iface, mac, m[1], state} flag=0}'
  register: ethernet_interface_name

- name: Convert shell JSON lines into a list
  ansible.builtin.set_fact:
    ethernet_interface_name_list: "{{ ethernet_interface_name.stdout_lines | map('from_json') | list }}"

- name: network | Display ethernet interface name
  ansible.builtin.debug:
    msg: "{{ item }}"
  with_items: "{{ ethernet_interface_name_list }}"


# -------------------------------------------- #

- name: network | Change NetworkManager configuration
  community.general.nmcli:
    conn_name: "{{ nmcli_connection_name_0 }}"
    ifname: "{{ nmcli_device_interface_name_0 }}"
    type: "{{ nmcli_connection_type }}"
    ip4: "{{ ipv4_addresses }}/{{ ipv4_addresses_subnet_mask }}"
    method4: "manual"
    gw4: "{{ ipv4_gateway }}"
    method6: "disabled"
    dns4:
      - "{{ a_dns1 }}"
      - "{{ a_dns2 }}"
    state: present
  notify:
    - Reboot server
  when: primary_network_manager == 'NetworkManager'

# -------------------------------------------- #
- name: prepare server network config
  vars:
    my_interface: "{{ ansible_default_ipv4.interface }}"
    my_interface_data:
      dhcp4: no
      dhcp6: no
      accept-ra: no
      addresses:
        - "{{ ipv4_addresses }}/{{ ipv4_addresses_subnet_mask }}"
      routes:
        - to: 0.0.0.0/0 #default
          via: "{{ ipv4_gateway }}"
      nameservers:
        addresses:
          - "{{ a_dns1 }}"
          - "{{ a_dns2 }}"
#        search:
#          "{{ a_domain }}" #"{{ ansible_dns.search | default('not_found_in_facts') }}"

  ansible.builtin.set_fact:
    my_network:
      ethernets: "{{ { my_interface:my_interface_data } }}"
      version: 2
      renderer: networkd

- name: Set network config
  ansible.builtin.set_fact:
    netplan_configuration:
      network: "{{ my_network }}"

- name: Showing the new server network config
  ansible.builtin.debug:
    var: netplan_configuration

- name: Change server network config
  ansible.builtin.template:
    src: netplan.j2
    dest: "/etc/netplan/99-network-config.yaml"
    mode: 0644
    backup: no
  become: true
  when: netplan_configuration != []
  notify: netplan generate config
